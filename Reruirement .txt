Game Store Project

This project involves creating a simple database backed REST inventory management web service for a Video Game Store using Agile development techniques in a solo setting. You are responsible for designing and documenting the REST API and implementing the controller, service, layer, DAO, Java data objects, and unit tests for the application based on an existing database structure.


Structure

Your solution must have the following structural elements:


Your solution must be in an IntelliJ project called FirstNameLastNameU1Capstone where FirstName and LastName are your first and last names respectively.
Your project must be built using Spring Boot and Spring MVC. Initialize your project using start.spring.io

Your solution must include a DAO the utilized JdbcTemplates and Prepared Statements
Your REST API must be documented with Swagger
Your REST API must accept and return data in JSON format where appropriate
You must implement ControllerAdvice to handle exceptions and return propery HTTP status codes and data when exception occur. This includes handling all violoations of business rules.



Methodology


You must manage your work in Pivotal Tracker
You must create stories and epics
You must estimate your work using story points
You must use a Test Driven Development approach (inluding Red/Green/Refactor) for your code
You must use JUnit for unit and integration tests
Your design must include a Service Layer
Your unit test suite should utilize mock objects where appropriate
You should utilize JSR303 for input validation



Requirements/Features

This system must manage the inventory of video games, game consoles, and t-shirts.


Your REST API must allow the end user to:


Games:


Perform standard CRUD operations for Games
Search for Games by Studio
Search for Games by ESRB Rating
Search for Games by Title
You must create a separate DAO for Games


Consoles:


Perform standard CRUD operations for Consoles
Search for Consoles by Manufacturer
You must create a separate DAO for Consoles


T-Shirts:


Perform standard CRUD operations for T-Shirts
Search for T-Shirts by Color
Search for T-Shirts by Size
You must create a separate DAO for T-Shirts


Purchasing Items:


User should be able to purchase items in inventory by supplying the following information to the endpoint:


Name
Street
City
State
Zip
Item Type
Item ID
Quantity


The endpoint returns invoice data based on the invoice table below.
All invoice calculations must be done in the Service Layer.
You must create a DAO for both taxes and processing fees.






You must use the following database structure:

create schema if not exists game_store;
use game_store;

create table if not exists game (
    game_id int(11) not null auto_increment primary key,
    title varchar(50) not null,
    esrb_rating varchar(50) not null,
    description varchar(255) not null,
    price decimal(5, 2) not null,
    studio varchar(50) not null,
    quantity int(11)
);

create table if not exists console (
    console_id int(11) not null auto_increment primary key,
    model varchar(50) not null,
    manufacturer varchar(50) not null,
    memory_amount varchar(20),
    processor varchar(20),
    price decimal(5, 2) not null,
    quantity int(11) not null
);

create table if not exists t_shirt (
    t_shirt_id int(11) not null auto_increment primary key,
    size varchar(20) not null,
    color varchar(20) not null,
    description varchar(255) not null,
    price decimal(5,2) not null,
    quantity int(11) not null
);

create table if not exists sales_tax_rate (
    state char(2) not null,
    rate decimal(3,2) not null
);

create unique index ix_state_rate on sales_tax_rate (state, rate);

create table if not exists processing_fee (
    product_type varchar(20) not null,
    fee decimal (4,2)
);

create unique index ix_product_type_fee on processing_fee (product_type, fee);

create table if not exists invoice (
    invoice_id int(11) not null auto_increment primary key,
    name varchar(80) not null,
    street varchar(30) not null,
    city varchar(30) not null,
    state varchar(30) not null,
    zipcode varchar(5) not null,
    item_type varchar(20) not null,
    item_id int(11) not null,
    unit_price decimal(5,2) not null,
    quantity int(11) not null,
    subtotal decimal(5,2) not null,
    tax decimal(5,2) not null,
    processing_fee decimal (5,2) not null,
    total decimal(5,2) not null
);

Test Requirements


You must test all routes using MockMVC.


This includes testing for both expected return values, and expected controller failures (4xx and 5xx status codes)


Test all service layer methods


You should have 100% code coverage of the service layer
These should be unit tests -- in other words, they should employ mocking


You must have integration tests for all DAOs


These should test the basic CRUD operations
It should also test any custom methods you've defined (such as findByCategory)





Business Rules


Sales tax applies only to the cost of the items.
Sales tax does not apply to any processing fees for an invoice.
The processing fee is applied only once per order regardless of the number of items in the order unless the number of items on the order is greater than 10 in which case an additional processing fee of $15.49 is applied to the order. 
The order process logic must properly update the quantity on hand for the item in the order.
Order quantity must be greater than zero.
Order quantity must be less than or equal to the number of items on hand in inventory.
Order must contain a valid state code.
The REST API must properly handle and report all violations of business rules.